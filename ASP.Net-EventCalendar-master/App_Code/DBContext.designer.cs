#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CIT386")]
public partial class DBContextDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAppointment(Appointment instance);
  partial void UpdateAppointment(Appointment instance);
  partial void DeleteAppointment(Appointment instance);
  partial void InsertBuilding(Building instance);
  partial void UpdateBuilding(Building instance);
  partial void DeleteBuilding(Building instance);
  partial void InsertRoom(Room instance);
  partial void UpdateRoom(Room instance);
  partial void DeleteRoom(Room instance);
  partial void Inserttoken(token instance);
  partial void Updatetoken(token instance);
  partial void Deletetoken(token instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DBContextDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CIT386ConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DBContextDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBContextDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DBContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Appointment> Appointments
	{
		get
		{
			return this.GetTable<Appointment>();
		}
	}
	
	public System.Data.Linq.Table<Building> Buildings
	{
		get
		{
			return this.GetTable<Building>();
		}
	}
	
	public System.Data.Linq.Table<Room> Rooms
	{
		get
		{
			return this.GetTable<Room>();
		}
	}
	
	public System.Data.Linq.Table<token> tokens
	{
		get
		{
			return this.GetTable<token>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AppointmentID;
	
	private System.Nullable<int> _StudentID;
	
	private System.Nullable<int> _InstructorID;
	
	private System.Nullable<int> _RoomID;
	
	private System.Nullable<System.DateTime> _AppointmentDate;
	
	private string _AppointmentTitle;
	
	private string _AppointmentDescription;
	
	private System.Nullable<System.DateTime> _AppointmentComplete;
	
	private System.Nullable<byte> _AppointmentAllDay;
	
	private EntityRef<Room> _Room;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnInstructorIDChanging(System.Nullable<int> value);
    partial void OnInstructorIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnAppointmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppointmentDateChanged();
    partial void OnAppointmentTitleChanging(string value);
    partial void OnAppointmentTitleChanged();
    partial void OnAppointmentDescriptionChanging(string value);
    partial void OnAppointmentDescriptionChanged();
    partial void OnAppointmentCompleteChanging(System.Nullable<System.DateTime> value);
    partial void OnAppointmentCompleteChanged();
    partial void OnAppointmentAllDayChanging(System.Nullable<byte> value);
    partial void OnAppointmentAllDayChanged();
    #endregion
	
	public Appointment()
	{
		this._Room = default(EntityRef<Room>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AppointmentID
	{
		get
		{
			return this._AppointmentID;
		}
		set
		{
			if ((this._AppointmentID != value))
			{
				this.OnAppointmentIDChanging(value);
				this.SendPropertyChanging();
				this._AppointmentID = value;
				this.SendPropertyChanged("AppointmentID");
				this.OnAppointmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
	public System.Nullable<int> StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorID", DbType="Int")]
	public System.Nullable<int> InstructorID
	{
		get
		{
			return this._InstructorID;
		}
		set
		{
			if ((this._InstructorID != value))
			{
				this.OnInstructorIDChanging(value);
				this.SendPropertyChanging();
				this._InstructorID = value;
				this.SendPropertyChanged("InstructorID");
				this.OnInstructorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int")]
	public System.Nullable<int> RoomID
	{
		get
		{
			return this._RoomID;
		}
		set
		{
			if ((this._RoomID != value))
			{
				if (this._Room.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoomIDChanging(value);
				this.SendPropertyChanging();
				this._RoomID = value;
				this.SendPropertyChanged("RoomID");
				this.OnRoomIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> AppointmentDate
	{
		get
		{
			return this._AppointmentDate;
		}
		set
		{
			if ((this._AppointmentDate != value))
			{
				this.OnAppointmentDateChanging(value);
				this.SendPropertyChanging();
				this._AppointmentDate = value;
				this.SendPropertyChanged("AppointmentDate");
				this.OnAppointmentDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentTitle", DbType="VarChar(100)")]
	public string AppointmentTitle
	{
		get
		{
			return this._AppointmentTitle;
		}
		set
		{
			if ((this._AppointmentTitle != value))
			{
				this.OnAppointmentTitleChanging(value);
				this.SendPropertyChanging();
				this._AppointmentTitle = value;
				this.SendPropertyChanged("AppointmentTitle");
				this.OnAppointmentTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDescription", DbType="VarChar(255)")]
	public string AppointmentDescription
	{
		get
		{
			return this._AppointmentDescription;
		}
		set
		{
			if ((this._AppointmentDescription != value))
			{
				this.OnAppointmentDescriptionChanging(value);
				this.SendPropertyChanging();
				this._AppointmentDescription = value;
				this.SendPropertyChanged("AppointmentDescription");
				this.OnAppointmentDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentComplete", DbType="DateTime")]
	public System.Nullable<System.DateTime> AppointmentComplete
	{
		get
		{
			return this._AppointmentComplete;
		}
		set
		{
			if ((this._AppointmentComplete != value))
			{
				this.OnAppointmentCompleteChanging(value);
				this.SendPropertyChanging();
				this._AppointmentComplete = value;
				this.SendPropertyChanged("AppointmentComplete");
				this.OnAppointmentCompleteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentAllDay", DbType="TinyInt")]
	public System.Nullable<byte> AppointmentAllDay
	{
		get
		{
			return this._AppointmentAllDay;
		}
		set
		{
			if ((this._AppointmentAllDay != value))
			{
				this.OnAppointmentAllDayChanging(value);
				this.SendPropertyChanging();
				this._AppointmentAllDay = value;
				this.SendPropertyChanged("AppointmentAllDay");
				this.OnAppointmentAllDayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Appointment", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
	public Room Room
	{
		get
		{
			return this._Room.Entity;
		}
		set
		{
			Room previousValue = this._Room.Entity;
			if (((previousValue != value) 
						|| (this._Room.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Room.Entity = null;
					previousValue.Appointments.Remove(this);
				}
				this._Room.Entity = value;
				if ((value != null))
				{
					value.Appointments.Add(this);
					this._RoomID = value.RoomID;
				}
				else
				{
					this._RoomID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Room");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Building")]
public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BuildingID;
	
	private string _BuildingName;
	
	private EntitySet<Room> _Rooms;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuildingIDChanging(int value);
    partial void OnBuildingIDChanged();
    partial void OnBuildingNameChanging(string value);
    partial void OnBuildingNameChanged();
    #endregion
	
	public Building()
	{
		this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int BuildingID
	{
		get
		{
			return this._BuildingID;
		}
		set
		{
			if ((this._BuildingID != value))
			{
				this.OnBuildingIDChanging(value);
				this.SendPropertyChanging();
				this._BuildingID = value;
				this.SendPropertyChanged("BuildingID");
				this.OnBuildingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingName", DbType="VarChar(100)")]
	public string BuildingName
	{
		get
		{
			return this._BuildingName;
		}
		set
		{
			if ((this._BuildingName != value))
			{
				this.OnBuildingNameChanging(value);
				this.SendPropertyChanging();
				this._BuildingName = value;
				this.SendPropertyChanged("BuildingName");
				this.OnBuildingNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_Room", Storage="_Rooms", ThisKey="BuildingID", OtherKey="BuildingID")]
	public EntitySet<Room> Rooms
	{
		get
		{
			return this._Rooms;
		}
		set
		{
			this._Rooms.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Rooms(Room entity)
	{
		this.SendPropertyChanging();
		entity.Building = this;
	}
	
	private void detach_Rooms(Room entity)
	{
		this.SendPropertyChanging();
		entity.Building = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RoomID;
	
	private System.Nullable<int> _BuildingID;
	
	private string _RoomNumber;
	
	private EntitySet<Appointment> _Appointments;
	
	private EntityRef<Building> _Building;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(int value);
    partial void OnRoomIDChanged();
    partial void OnBuildingIDChanging(System.Nullable<int> value);
    partial void OnBuildingIDChanged();
    partial void OnRoomNumberChanging(string value);
    partial void OnRoomNumberChanged();
    #endregion
	
	public Room()
	{
		this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
		this._Building = default(EntityRef<Building>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RoomID
	{
		get
		{
			return this._RoomID;
		}
		set
		{
			if ((this._RoomID != value))
			{
				this.OnRoomIDChanging(value);
				this.SendPropertyChanging();
				this._RoomID = value;
				this.SendPropertyChanged("RoomID");
				this.OnRoomIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID", DbType="Int")]
	public System.Nullable<int> BuildingID
	{
		get
		{
			return this._BuildingID;
		}
		set
		{
			if ((this._BuildingID != value))
			{
				if (this._Building.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBuildingIDChanging(value);
				this.SendPropertyChanging();
				this._BuildingID = value;
				this.SendPropertyChanged("BuildingID");
				this.OnBuildingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomNumber", DbType="VarChar(50)")]
	public string RoomNumber
	{
		get
		{
			return this._RoomNumber;
		}
		set
		{
			if ((this._RoomNumber != value))
			{
				this.OnRoomNumberChanging(value);
				this.SendPropertyChanging();
				this._RoomNumber = value;
				this.SendPropertyChanged("RoomNumber");
				this.OnRoomNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Appointment", Storage="_Appointments", ThisKey="RoomID", OtherKey="RoomID")]
	public EntitySet<Appointment> Appointments
	{
		get
		{
			return this._Appointments;
		}
		set
		{
			this._Appointments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_Room", Storage="_Building", ThisKey="BuildingID", OtherKey="BuildingID", IsForeignKey=true)]
	public Building Building
	{
		get
		{
			return this._Building.Entity;
		}
		set
		{
			Building previousValue = this._Building.Entity;
			if (((previousValue != value) 
						|| (this._Building.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Building.Entity = null;
					previousValue.Rooms.Remove(this);
				}
				this._Building.Entity = value;
				if ((value != null))
				{
					value.Rooms.Add(this);
					this._BuildingID = value.BuildingID;
				}
				else
				{
					this._BuildingID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Building");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Room = this;
	}
	
	private void detach_Appointments(Appointment entity)
	{
		this.SendPropertyChanging();
		entity.Room = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.token")]
public partial class token : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TokenID;
	
	private System.Nullable<int> _UserID;
	
	private string _Token1;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTokenIDChanging(int value);
    partial void OnTokenIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnToken1Changing(string value);
    partial void OnToken1Changed();
    #endregion
	
	public token()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TokenID
	{
		get
		{
			return this._TokenID;
		}
		set
		{
			if ((this._TokenID != value))
			{
				this.OnTokenIDChanging(value);
				this.SendPropertyChanging();
				this._TokenID = value;
				this.SendPropertyChanged("TokenID");
				this.OnTokenIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
	public System.Nullable<int> UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Token", Storage="_Token1", DbType="VarChar(255)")]
	public string Token1
	{
		get
		{
			return this._Token1;
		}
		set
		{
			if ((this._Token1 != value))
			{
				this.OnToken1Changing(value);
				this.SendPropertyChanging();
				this._Token1 = value;
				this.SendPropertyChanged("Token1");
				this.OnToken1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_token", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.tokens.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.tokens.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _UserEmail;
	
	private string _UserPass;
	
	private string _UserSalt;
	
	private string _UserFirst;
	
	private string _UserLast;
	
	private string _UserPhone;
	
	private System.Nullable<bool> _IsInstructor;
	
	private System.Nullable<bool> _IsVerified;
	
	private EntitySet<token> _tokens;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserPassChanging(string value);
    partial void OnUserPassChanged();
    partial void OnUserSaltChanging(string value);
    partial void OnUserSaltChanged();
    partial void OnUserFirstChanging(string value);
    partial void OnUserFirstChanged();
    partial void OnUserLastChanging(string value);
    partial void OnUserLastChanged();
    partial void OnUserPhoneChanging(string value);
    partial void OnUserPhoneChanged();
    partial void OnIsInstructorChanging(System.Nullable<bool> value);
    partial void OnIsInstructorChanged();
    partial void OnIsVerifiedChanging(System.Nullable<bool> value);
    partial void OnIsVerifiedChanged();
    #endregion
	
	public User()
	{
		this._tokens = new EntitySet<token>(new Action<token>(this.attach_tokens), new Action<token>(this.detach_tokens));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string UserEmail
	{
		get
		{
			return this._UserEmail;
		}
		set
		{
			if ((this._UserEmail != value))
			{
				this.OnUserEmailChanging(value);
				this.SendPropertyChanging();
				this._UserEmail = value;
				this.SendPropertyChanged("UserEmail");
				this.OnUserEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPass", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UserPass
	{
		get
		{
			return this._UserPass;
		}
		set
		{
			if ((this._UserPass != value))
			{
				this.OnUserPassChanging(value);
				this.SendPropertyChanging();
				this._UserPass = value;
				this.SendPropertyChanged("UserPass");
				this.OnUserPassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSalt", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UserSalt
	{
		get
		{
			return this._UserSalt;
		}
		set
		{
			if ((this._UserSalt != value))
			{
				this.OnUserSaltChanging(value);
				this.SendPropertyChanging();
				this._UserSalt = value;
				this.SendPropertyChanged("UserSalt");
				this.OnUserSaltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirst", DbType="VarChar(100)")]
	public string UserFirst
	{
		get
		{
			return this._UserFirst;
		}
		set
		{
			if ((this._UserFirst != value))
			{
				this.OnUserFirstChanging(value);
				this.SendPropertyChanging();
				this._UserFirst = value;
				this.SendPropertyChanged("UserFirst");
				this.OnUserFirstChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLast", DbType="VarChar(100)")]
	public string UserLast
	{
		get
		{
			return this._UserLast;
		}
		set
		{
			if ((this._UserLast != value))
			{
				this.OnUserLastChanging(value);
				this.SendPropertyChanging();
				this._UserLast = value;
				this.SendPropertyChanged("UserLast");
				this.OnUserLastChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhone", DbType="VarChar(20)")]
	public string UserPhone
	{
		get
		{
			return this._UserPhone;
		}
		set
		{
			if ((this._UserPhone != value))
			{
				this.OnUserPhoneChanging(value);
				this.SendPropertyChanging();
				this._UserPhone = value;
				this.SendPropertyChanged("UserPhone");
				this.OnUserPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInstructor", DbType="Bit")]
	public System.Nullable<bool> IsInstructor
	{
		get
		{
			return this._IsInstructor;
		}
		set
		{
			if ((this._IsInstructor != value))
			{
				this.OnIsInstructorChanging(value);
				this.SendPropertyChanging();
				this._IsInstructor = value;
				this.SendPropertyChanged("IsInstructor");
				this.OnIsInstructorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit")]
	public System.Nullable<bool> IsVerified
	{
		get
		{
			return this._IsVerified;
		}
		set
		{
			if ((this._IsVerified != value))
			{
				this.OnIsVerifiedChanging(value);
				this.SendPropertyChanging();
				this._IsVerified = value;
				this.SendPropertyChanged("IsVerified");
				this.OnIsVerifiedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_token", Storage="_tokens", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<token> tokens
	{
		get
		{
			return this._tokens;
		}
		set
		{
			this._tokens.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tokens(token entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_tokens(token entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}
#pragma warning restore 1591
